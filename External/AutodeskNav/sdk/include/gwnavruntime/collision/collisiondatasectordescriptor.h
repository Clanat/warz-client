/*
* Copyright 2013 Autodesk, Inc. All rights reserved.
* Use of this software is subject to the terms of the Autodesk license agreement and any attachments or Appendices thereto provided at the time of installation or download,
* or which otherwise accompanies this software in either electronic or hard copy form, or which is signed by you and accepted by Autodesk.
*/


// primary contact: JAPA - secondary contact: GUAL
#ifndef Navigation_ColDataSectorDescriptor_H
#define Navigation_ColDataSectorDescriptor_H

#include "gwnavruntime/blob/blobfieldarray.h"
#include "gwnavruntime/blob/blobaggregate.h"
#include "gwnavruntime/collision/collisiondatablobcategory.h"

namespace Kaim
{

/// Set of Key-Values embedded within in ColData BlobAggregate (serialized form).
/// These Key-Values allows typically to retrieve information about where the NavData comes from.
class ColDataSectorDescriptorBlob
{
	KY_DEFINE_NEW_DELETE_OPERATORS(MemStat_CollisionData)
	KY_CLASS_WITHOUT_COPY(ColDataSectorDescriptorBlob)
	KY_ROOT_BLOB_CLASS(CollisionData, ColDataSectorDescriptorBlob, 0)
public:
	ColDataSectorDescriptorBlob() {}
	BlobFieldArray m_fields;
};
inline void SwapEndianness(Endianness::Target e, ColDataSectorDescriptorBlob& self)
{
	SwapEndianness(e, self.m_fields);
}

/// Easy to write/read version of SectorDescriptorBlob.
/// SectorDescriptor contains information about where the NavData comes from.
/// Written in GeneratorSectorBuilder::MakePlainSectorNavData() when generating NavMesh from the generation process
//  or in NavData::Save() when saving NavGraph-only Navdata at runtime or in user's post-process of the generation.
//  Read along with NavData Load.
/// Contains m_sectorName and m_generatorRelativeOutputDirectory, it's possible to retrieve the NavData file path
/// that was generated by the Generation by concatenating
/// GeneratorRootDirectory/m_generatorRelativeOutputDirectory/m_sectorName.EXTENSION
/// where EXTENSION is NavData or ClientInput.
class ColDataSectorDescriptor
{
	KY_DEFINE_NEW_DELETE_OPERATORS(MemStat_CollisionData)

public:
	ColDataSectorDescriptor() {}

	KyResult ReadFromAggregate(const BlobAggregate& aggregate)
	{
		BlobAggregate::Collection<ColDataSectorDescriptorBlob> sectorDescs = aggregate.GetCollection<ColDataSectorDescriptorBlob>();
		if (sectorDescs.GetCount() != 1)
			return KY_ERROR; // 1 and only 1 SectorDescriptorBlob
		return ReadFromBlob(*sectorDescs.GetHandler(0)->Blob());
	}

	void AddMapping(BlobFieldsMapping& mapping)
	{
		mapping.AddString("SectorName", m_sectorName);
		mapping.AddString("GeneratorRelativeOutputDirectory", m_generatorRelativeOutputDirectory);
		mapping.AddGuid("SectorGUID", m_guid);
	}

	KyResult ReadFromBlob(const ColDataSectorDescriptorBlob& blob)
	{
		BlobFieldsMapping mapping;
		AddMapping(mapping);
		return mapping.ReadFromBlobFieldArray(blob.m_fields);
	}

public:
	/// Contains the name of the sector which is also the name of the file
	/// This is used to identify Graph-only NavData (in opposition to NavData containing NavMeshElements) since NavGraph has no guid.
	String m_sectorName;

	/// Generator relative directory to used by the generator to output NavData, ClientInput, GenIO, related to this sector
	/// m_generatorRelativeOutputDirectory is relativeOutputDir in the call to void SetOutputDirectory(const char* absoluteOutputBaseDir, const char* relativeOutputDir);
	String m_generatorRelativeOutputDirectory;

	/// Index of the Lab's database in which the NavData will be added to.
	/// On connection, the NavData will be sent to the Game with this database index.
	KyGuid m_guid;
};

} // namespace Kaim

#endif // Navigation_ColDataSectorDescriptor_H
